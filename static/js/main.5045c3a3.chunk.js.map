{"version":3,"sources":["Nandi.js","App.js","serviceWorker.js","index.js"],"names":["Nandi","linkInit","useState","lnk","setLnk","showMap","setShowMap","startDate","setStartDate","files","setFiles","filesLoaded","setFilesLoaded","force","setForce","lebel","setLebel","pad","str","max","toString","length","useEffect","fetch","then","res","json","map","item","name","catch","err","console","log","m","d","y","toLocaleDateString","split","linkMid","concat","link","lnkLebel","incDates","Date","dy","mn","yr","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Map","center","zoom","style","height","zoomControl","TileLayer","url","attribution","ImageOverlay","bounds","opacity","position","src","alt","width","display","justifyContent","marginTop","textAlign","selected","onChange","date","dt","mapChange","includeDates","placeholderText","withPortal","popperPlacement","popperModifiers","flip","behavior","preventOverflow","enabled","hide","value","event","target","App","Container","fluid","background","Row","Col","xs","md","Navbar","Brand","href","noGutters","fontFamily","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5045c3a3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Map, TileLayer } from \"react-leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport {\n  ImageOverlay,\n} from \"react-leaflet\";\nimport DatePicker from 'react-datepicker'\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Control from 'react-leaflet-control';\n\n\n\n\n\n\nconst Nandi = () => {\n\n  // Declare url, address initial, and file format\n  const urlData = 'https://api.github.com/repos/nandisas/data_1/contents';\n  let linkInit = 'https://raw.githubusercontent.com/nandisas/data_1/main/';\n  let linkEnd = '.png'\n\n  // Declare States\n  const [lnk, setLnk] = useState('')\n  const [showMap, setShowMap] = useState(false)\n  const [startDate, setStartDate] = useState(null);\n  const [files, setFiles] = useState([])\n  const [filesLoaded, setFilesLoaded] = useState(false)\n\n\n\n\n  const [force, setForce] = useState(\"depth\");\n  const [lebel, setLebel] = useState(\"\");\n\n\tconst handleForceChange = event => {\n\t\tsetForce(\n\t\t\tevent.target.value\n    )\n    // console.log(force)\n\t}\n\n\n\n\n\n\n\n\n\n\n  // Declare functions\n  const getDateArrayy = (item) => {\n    let [dy, mn, yr] = item.split(/[_.]+/);\n    mn = mn-1;\n    let data = new Date(yr, mn, dy);\n    return data;\n  }\n\n  const pad = (str, max) => {\n    str = str.toString();\n  return str.length < max ? pad(\"0\" + str, max) : str;\n  };\n\n  const mapChange = (dt) => {\n    // setSelectedOption(e.value);\n    let m, d, y;\n    [m, d, y]  = dt.toLocaleDateString(\"en-US\").split(\"/\")\n    m = pad(m,2)\n    d = pad(d,2)\n    let linkMid = d.concat('_', m,'_',y) ;\n    let link = linkInit.concat(linkMid, '_d', linkEnd);\n    setLnk(link);\n    setShowMap(true);\n\n    let lnkLebel = linkInit.concat(linkMid, '_d_bar', linkEnd);\n    setLebel(lnkLebel)\n\n    setForce(\"depth\")\n  }\n\n  // Declare Component lifecycle method\n  useEffect(()=>{\n    fetch(urlData)\n    .then(res => res.json())\n    .then(res =>res.map(item=>item.name))\n    .then(res => {\n      // console.log(res)\n      setFiles(res)\n      setFilesLoaded(true)\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  }, [])\n\n  useEffect(()=>{\n    // console.log(force)\n    let m, d, y;\n    if (startDate){\n      // console.log(\"yes\")\n      [m, d, y]  = startDate.toLocaleDateString(\"en-US\").split(\"/\")\n      m = pad(m,2)\n      d = pad(d,2)\n      let linkMid = d.concat('_', m,'_',y) ;\n      let link = ''\n      let lnkLebel = ''\n      if (force === 'depth') {\n        link = linkInit.concat(linkMid, '_d', linkEnd);\n        lnkLebel = linkInit.concat(linkMid, '_d_bar', linkEnd);\n      }\n      if (force === 'velocity') {\n        link = linkInit.concat(linkMid, '_v', linkEnd);\n        lnkLebel = linkInit.concat(linkMid, '_v_bar', linkEnd);\n      }\n      setLnk(link)\n      setLebel(lnkLebel)\n      // console.log(link)\n    }\n\n  },[force, linkEnd, linkInit, startDate])\n\n  // Load dates to be included [days where we have flood inundation map, nake them active(calendar)\n  var incDates = [new Date()];\n  if (filesLoaded) {\n    // console.log(files)\n    incDates = files.map(getDateArrayy)\n    // console.log(incDates)\n  }\n  // Leafleet design set\n  delete L.Icon.Default.prototype._getIconUrl;\n\n  L.Icon.Default.mergeOptions({\n      iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n      iconUrl: require('leaflet/dist/images/marker-icon.png'),\n      shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n  });\n\n  // const legend = L.control({ position: \"bottomright\" });\n\n  return (\n    <div>\n\n        <Map\n        center={[16.7140350, 74.2236370]}\n        zoom={12}\n        style={{height: '480px'}}\n        zoomControl={true}\n        >\n\n            <TileLayer\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              attribution=''\n            />\n\n\n            {showMap ? (\n              <ImageOverlay\n                bounds={[\n                  [16.6725950 , 74.1854170],\n                  [16.7554750, 74.2618570],\n                ]}\n                opacity= {1}\n                url={lnk}\n              />\n            ) : null}\n\n          <Control position=\"bottomright\" >\n          {showMap ? (\n                        <img\n                        src={lebel}\n                        alt=\"new\"\n                        width={40}\n                      />\n    \n            ) : null}\n          </Control>\n        </Map>\n        \n\n        <div>\n            <div style={{display: 'flex', justifyContent: 'center', marginTop: '20px'}}>\n            <h5>Select Date</h5>\n            </div>\n            <div style={{display: 'flex', justifyContent: 'center', textAlign: 'center'}}>\n            {/* <div> */}\n            <DatePicker\n                selected={startDate}\n                onChange={date => {setStartDate(date);mapChange(date)}}\n                includeDates={incDates}\n                placeholderText=\"           Select dates!\"\n                // isClearable\n                // className=\"red-border\"\n                // openToDate={new Date(\"1993/09/28\")}\n                withPortal\n                popperPlacement=\"bottom\"\n                popperModifiers={{\n                    flip: {\n                        behavior: [\"bottom\"] // don't allow it to flip to be above\n                    },\n                    preventOverflow: {\n                        enabled: false // tell it not to try to stay within the view (this prevents the popper from covering the element you clicked)\n                    },\n                    hide: {\n                        enabled: false // turn off since needs preventOverflow to be enabled\n                    }\n                }}\n            />\n            </div>\n        </div>\n        \n\n        <div style={{display: 'flex', justifyContent: 'center', marginTop: '20px'}}>\n          <p>\n            Select type\n          </p>\n        </div>\n        <div style={{display: 'flex', justifyContent: 'center', marginTop: '10px'}}>\n\n        <select value={force} onChange={handleForceChange}>\n          <option value=\"depth\">depth</option>\n          <option value=\"velocity\">velocity</option>\n        </select>\n\n\n        </div>\n\n\n    </div>\n    )\n}\n\nexport default Nandi;","import React from 'react'\nimport Nandi from './Nandi'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Col, Container, Navbar, Row } from 'react-bootstrap';\n\n\nfunction App() {\n  return (\n    <div>\n    <Container fluid style={{background:'#f2ffe5'}}>\n\n    <Container >\n        <Row>\n            <Col></Col>\n            <Col xs={12} md={14}>\n                <Navbar  style={{display: 'flex', justifyContent: 'center', background: 'linear-gradient(to right, rgba(255,0,0,0), blue, rgba(255,0,0,0))'}}>\n                    <Navbar.Brand href=\"#home\">Flood Inundation Mapping</Navbar.Brand>\n                </Navbar>\n            </Col>\n            <Col></Col>\n        </Row>\n    </Container>\n\n    <Container style={{marginTop: 10 }}>\n    <Row noGutters>\n    <Col></Col>\n    <Col xs={12} md={14}>\n        <Nandi />\n    </Col>\n    <Col></Col>\n    </Row>\n    </Container>\n\n  <Container style={{marginTop: 40 }}>\n  </Container>\n  <Row noGutters>\n    <Col></Col>\n    <Col xs={12} md={14} style={{display: 'flex', justifyContent: 'center', fontFamily: \"Arial\", fontSize: 10}}>\n    {'\\u00A9'}2020, Saswata Nandi\n    </Col>\n    <Col></Col>\n    </Row>  \n  </Container>\n    </div>\n  )\n}\n\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}